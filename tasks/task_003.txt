# Task ID: 3
# Title: User Role Management with Rails
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Implement role-based access control system using Rails
# Details:
Create role management system using Rails models and controllers. Implement six distinct roles (Submitter, Country/Chapter Admin, Treasury Team Admin, Super Admin, Viewer, Treasury IT) with proper authorization using Rails policies.

# Test Strategy:
Verify role permissions and access controls through Rails test suite

# Subtasks:
## 1. Create Role Model and Database Schema [pending]
### Dependencies: None
### Description: Design and implement the Role model and necessary database schema to support the six distinct roles (Submitter, Country/Chapter Admin, Treasury Team Admin, Super Admin, Viewer, Treasury IT).
### Details:
Create a Role model with appropriate attributes (name, description, permissions). Set up a join table for user-role associations. Generate and run migrations to create the necessary database tables. Include seed data for the six predefined roles.

## 2. Implement User-Role Associations [pending]
### Dependencies: 3.1
### Description: Set up the association between Users and Roles, allowing users to be assigned one or multiple roles.
### Details:
Update the User model with a has_many :roles association through a join table. Add methods to check if a user has a specific role (e.g., user.has_role?(:admin)). Implement methods to assign and remove roles from users. Update user forms/views to allow role assignment.

## 3. Create Authorization Policies with Pundit [pending]
### Dependencies: 3.2
### Description: Implement Pundit policies to handle authorization based on user roles.
### Details:
Install and configure the Pundit gem. Create policy classes for each resource that needs role-based access control. Define permissions for each role in the policies. Implement policy scopes to filter collections based on user roles. Ensure policies handle all six roles correctly.

## 4. Implement Role Management UI [pending]
### Dependencies: 3.2, 3.3
### Description: Create admin interface for managing roles and assigning roles to users.
### Details:
Create controllers and views for role management (index, show, edit, update). Implement user search and bulk role assignment features. Add role filtering and sorting capabilities. Ensure the interface is accessible only to users with appropriate permissions (Super Admin). Include confirmation dialogs for critical role changes.

## 5. Integrate Role-Based Access Control with Views and Controllers [pending]
### Dependencies: 3.3
### Description: Apply role-based access control throughout the application by updating views and controllers to respect user permissions.
### Details:
Update controllers to use Pundit for authorization checks. Modify views to show/hide elements based on user roles. Add before_action filters to restrict access to controllers/actions. Implement custom error pages for authorization failures. Add role-specific navigation menus and dashboards for each role type.

