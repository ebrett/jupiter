# Task ID: 1
# Title: Rails Project Setup and Infrastructure
# Status: done
# Dependencies: None
# Priority: high
# Description: Set up the Rails 8 project with Hotwire, Stimulus, and TailwindCSS
# Details:
Initialize Rails 8 project, configure Hotwire, Stimulus, and TailwindCSS. Set up PostgreSQL database, configure development environment, and establish basic project structure.

# Test Strategy:
Verify Rails server starts, Hotwire/Stimulus functionality, and database connectivity

# Subtasks:
## 1. Initialize Rails 8 Project with PostgreSQL [done]
### Dependencies: None
### Description: Create a new Rails 8 project with PostgreSQL as the database and set up the basic project structure
### Details:
Run `rails new project_name --database=postgresql --css=tailwind` to create a new Rails 8 project. Configure database.yml for development, test, and production environments. Run initial database setup with `rails db:create`. Set up .gitignore file and initialize Git repository.

## 2. Configure Hotwire and Stimulus [done]
### Dependencies: 1.1
### Description: Set up and configure Hotwire (Turbo and Stimulus) for dynamic frontend interactions
### Details:
Add Hotwire gems to Gemfile if not included by default. Install Stimulus by running `rails stimulus:install`. Create a basic Stimulus controller to verify setup. Configure Turbo Drive, Frames, and Streams in application.js. Set up ActionCable for Turbo Streams if needed.

## 3. Set up TailwindCSS Configuration [done]
### Dependencies: 1.1
### Description: Configure and customize TailwindCSS for the application's styling needs
### Details:
Verify TailwindCSS installation from Rails new command. Create tailwind.config.js with appropriate content paths. Set up custom theme configuration including colors, fonts, and spacing. Configure PostCSS if needed. Create base application styles in app/assets/stylesheets/application.tailwind.css. Set up purging for production.
<info added on 2025-05-15T08:41:02.926Z>
Implementation plan for TailwindCSS configuration:

1. Verify TailwindCSS installation from Rails new command (should be included if using `rails new project_name --database=postgresql --css=tailwind`).
   - Check for tailwindcss-rails gem in Gemfile
   - Confirm presence of tailwind.config.js file

2. If not installed, add TailwindCSS:
   - Run: `bundle add tailwindcss-rails`
   - Run: `rails tailwindcss:install`

3. Create or update tailwind.config.js:
   - Configure content paths to include all relevant directories:
     ```js
     content: [
       './app/views/**/*.html.erb',
       './app/helpers/**/*.rb',
       './app/javascript/**/*.js',
       './app/assets/stylesheets/**/*.css'
     ]
     ```
   - Set up custom theme configuration:
     - Define brand colors
     - Configure typography (font families, sizes)
     - Adjust spacing scale if needed

4. Configure PostCSS if needed for additional plugins beyond what Rails provides.

5. Create or update app/assets/stylesheets/application.tailwind.css:
   - Ensure it includes the required Tailwind directives:
     ```css
     @tailwind base;
     @tailwind components;
     @tailwind utilities;
     ```
   - Add any custom component classes using @apply

6. Set up purging for production (should be automatic with Rails integration).

7. Test the configuration:
   - Create a test page with various Tailwind utility classes
   - Verify custom theme values are applied correctly
   - Check responsive design utilities

8. Commit all changes to Git before proceeding to the next task.

Potential challenges to watch for:
- Missing content paths leading to purged styles in production
- Custom theme values not being applied correctly
- Build issues in development or production environments
</info added on 2025-05-15T08:41:02.926Z>

## 4. Configure Development Environment [done]
### Dependencies: 1.1, 1.2, 1.3
### Description: Set up comprehensive development environment with debugging tools, testing framework, and CI pipeline
### Details:
Configure RSpec, Factory Bot, and other testing gems. Set up debugging tools like debug gem or Pry. Configure linting with RuboCop. Set up CI pipeline configuration (GitHub Actions or similar). Create development seeds with `rails db:seed`. Configure environment variables with dotenv or credentials. Set up Docker development environment if needed.
<info added on 2025-05-15T09:26:34.121Z>
## Implementation Plan

1. Add and configure RSpec for testing:
   - Add `rspec-rails` to the Gemfile (group :development, :test)
   - Run `bundle install`
   - Run `rails generate rspec:install`
   - Verify generated files: `.rspec`, `spec/rails_helper.rb`, `spec/spec_helper.rb`

2. Add Factory Bot for test data:
   - Add `factory_bot_rails` to the Gemfile (group :development, :test)
   - Configure RSpec to use Factory Bot syntax in `spec/rails_helper.rb`
   - Create initial factory definitions in `spec/factories/` directory

3. Set up debugging tools:
   - Add `pry-rails` or `debug` gem to the Gemfile (group :development, :test)
   - Configure initialization in `.pryrc` if using Pry

4. Configure RuboCop for linting:
   - Add `rubocop`, `rubocop-rails`, and `rubocop-rspec` to the Gemfile
   - Run `bundle install`
   - Create `.rubocop.yml` with Rails style guide configurations
   - Add common exclusions and custom rules as needed

5. Set up CI pipeline with GitHub Actions:
   - Create directory structure `.github/workflows/`
   - Add `ci.yml` with jobs for:
     - Running tests (`bundle exec rspec`)
     - Running linters (`bundle exec rubocop`)
     - Checking security vulnerabilities (`bundle audit`)

6. Create development seeds:
   - Enhance `db/seeds.rb` with realistic development data
   - Structure seeds to be idempotent (can be run multiple times)
   - Add seed data for all major models in the application
   - Run `rails db:seed` to populate development database

7. Configure environment variables:
   - Add `dotenv-rails` to the Gemfile
   - Create `.env.example` with template variables (no real values)
   - Add `.env` to `.gitignore`
   - Document required environment variables in README
   - Use `rails credentials:edit` for sensitive production credentials

8. Set up Docker for development (optional):
   - Create `Dockerfile` for Rails application
   - Create `docker-compose.yml` for Rails, PostgreSQL, and Redis
   - Add Docker-specific configuration files (entrypoint scripts, etc.)
   - Document Docker setup and commands in README

9. Testing the setup:
   - Run complete test suite with `bundle exec rspec`
   - Verify linting works with `bundle exec rubocop`
   - Test CI pipeline locally or with a test commit
   - Verify seed data loads correctly

10. Documentation and finalization:
    - Update README with setup instructions
    - Document any custom configurations
    - Commit all changes to Git

Potential challenges:
- Ensuring consistent environments across team members
- CI pipeline configuration for all required services
- Managing secrets securely
- Docker configuration complexity

Next steps:
- After verifying the development environment, proceed to security configuration (task 1.5)
</info added on 2025-05-15T09:26:34.121Z>

## 5. Implement Basic Security Configuration [done]
### Dependencies: 1.1, 1.4
### Description: Set up security measures including authentication framework, CSRF protection, and secure headers
### Details:
Configure strong parameters in controllers. Set up CSRF protection in ApplicationController. Add secure headers configuration. Configure Content Security Policy. Set up basic authentication framework (Devise or similar if needed). Configure Rails credentials for sensitive information. Add Brakeman for security scanning.

