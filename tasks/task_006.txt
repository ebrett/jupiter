# Task ID: 6
# Title: Payment Processing System
# Status: pending
# Dependencies: 5
# Priority: high
# Description: Develop the payment processing and tracking system using Rails
# Details:
Create payment status tracking using Rails models. Implement payment metadata fields and prepare for future QuickBooks integration. Use Hotwire for real-time status updates.

# Test Strategy:
Test payment processing workflow and status updates

# Subtasks:
## 1. Create Payment Model and Database Schema [pending]
### Dependencies: None
### Description: Design and implement the Payment model with all necessary attributes for tracking payment status and metadata fields required for QuickBooks integration.
### Details:
Create a Payment model with attributes like amount, status (pending, processing, completed, failed), payment_method, transaction_id, customer_id, invoice_id, and metadata fields (json column). Add appropriate validations, associations with other models (e.g., User, Order), and indexes for performance. Run migrations to set up the database schema.

## 2. Implement Payment Status State Machine [pending]
### Dependencies: 6.1
### Description: Create a state machine to manage payment status transitions and ensure data integrity during the payment lifecycle.
### Details:
Use the AASM gem to implement a state machine for the Payment model. Define states (pending, processing, completed, failed, refunded) and transitions between them. Add callbacks for logging status changes and triggering notifications. Implement guard conditions to prevent invalid transitions.

## 3. Build Payment Processing Service [pending]
### Dependencies: 6.2
### Description: Create a service object to handle payment processing logic, including integration with payment gateways and error handling.
### Details:
Implement a PaymentProcessingService class that encapsulates payment gateway interactions. Design it to be payment provider agnostic with adapter patterns for different gateways. Include methods for processing payments, refunds, and verifying payment status. Add comprehensive error handling and logging. Structure the code to facilitate future QuickBooks integration.

## 4. Create Payment Controller and Views [pending]
### Dependencies: 6.3
### Description: Implement the controller actions and views for payment processing, history, and management.
### Details:
Create a PaymentsController with actions for new, create, show, index, and refund. Implement views for payment form, payment confirmation, payment details, and payment history. Add proper error handling and user feedback. Ensure proper authorization checks using Pundit or CanCanCan. Include filtering and sorting options for payment history.

## 5. Implement Real-time Payment Status Updates with Hotwire [pending]
### Dependencies: 6.2, 6.4
### Description: Use Hotwire to provide real-time payment status updates to users without page refreshes.
### Details:
Set up Turbo Streams to broadcast payment status changes. Create partials for different payment states. Update the Payment model to broadcast changes using callbacks. Implement a dashboard component that subscribes to payment updates. Add visual indicators for different payment statuses (pending, processing, completed, failed). Ensure proper error handling for connection issues.

