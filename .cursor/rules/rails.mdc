---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---

  You are an expert in Ruby on Rails, PostgreSQL, Hotwire (Turbo and Stimulus), and Tailwind CSS.
  
  Code Style and Structure
  - Write concise, idiomatic Ruby code with accurate examples.
  - Follow Rails conventions and best practices.
  - Use object-oriented and functional programming patterns as appropriate.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable and method names (e.g., user_signed_in?, calculate_total).
  - Structure files according to Rails conventions (MVC, concerns, helpers, etc.).
  
  Naming Conventions
  - Use snake_case for file names, method names, and variables.
  - Use CamelCase for class and module names.
  - Follow Rails naming conventions for models, controllers, and views.
  
  Ruby and Rails Usage
  - Use Ruby 3.x features when appropriate (e.g., pattern matching, endless methods).
  - Leverage Rails' built-in helpers and methods.
  - Use ActiveRecord effectively for database operations.
  
  Syntax and Formatting
  - Follow the Ruby Style Guide (https://rubystyle.guide/)
  - Use Ruby's expressive syntax (e.g., unless, ||=, &.)
  - Prefer single quotes for strings unless interpolation is needed.
  
  Error Handling and Validation
  - Use exceptions for exceptional cases, not for control flow.
  - Implement proper error logging and user-friendly messages.
  - Use ActiveModel validations in models.
  - Handle errors gracefully in controllers and display appropriate flash messages.
  
  UI and Styling
  - Use Hotwire (Turbo and Stimulus) for dynamic, SPA-like interactions.
  - Implement responsive design with Tailwind CSS.
  - Use Rails view helpers and partials to keep views DRY.
  
  Performance Optimization
  - Use database indexing effectively.
  - Implement caching strategies (fragment caching, Russian Doll caching).
  - Use eager loading to avoid N+1 queries.
  - Optimize database queries using includes, joins, or select.
  
  Key Conventions
  - Follow RESTful routing conventions.
  - Use concerns for shared behavior across models or controllers.
  - Implement service objects for complex business logic.
  - Use background jobs (e.g., Sidekiq) for time-consuming tasks.
  
  Testing
  - Write comprehensive tests using RSpec or Minitest.
  - Follow TDD/BDD practices.
  - Use factories (FactoryBot) for test data generation.
  
  Security
  - Implement proper authentication and authorization (e.g., Devise, Pundit).
  - Use strong parameters in controllers.
  - Protect against common web vulnerabilities (XSS, CSRF, SQL injection).
  
  Follow the official Ruby on Rails guides for best practices in routing, controllers, models, views, and other Rails components.
  
  - **Rails 8.0.2 is the current standard (released March 2025)**
    - All code, conventions, and examples should assume Rails 8.0.2 unless otherwise specified.
    - Do not reference Rails 7 or earlier versions in new documentation or rules.

  - **Active Record Encryption**
    - Use the `encrypts` macro to declare encrypted attributes in models.
      ```ruby
      class NationbuilderToken < ApplicationRecord
        encrypts :access_token
        encrypts :refresh_token
      end
      ```
    - Encryption keys must be set in credentials or environment variables.
    - All encrypted fields are transparently handled by Rails 8.0.2.

  - **General Rails 8 Conventions**
    - Follow idiomatic Ruby and Rails 8 best practices for models, controllers, and views.
    - Use the latest Rails 8 features and APIs where appropriate.
    - Reference the [Rails 8.0.2 Guides](https://guides.rubyonrails.org/) for up-to-date documentation.
  
  ## Tailwind UI Component Example Handling (Rails 8 + Hotwire)

  - **Reference Storage:**
    - Store raw HTML examples from Tailwind UI (e.g., from tailwindcss.com/plus) in `/scripts/tailwind-ui/`.
    - Do **not** render these files directly in production; use as a design/component reference library only.
    - Organize by component type (e.g., `/scripts/tailwind-ui/forms/`, `/lists/`, `/navigation/`).

  - **Integration Workflow:**
    1. **Copy HTML** from `/scripts/tailwind-ui/` into a new partial in `app/views/shared/` or `app/views/components/` (e.g., `_user_table.html.erb`).
    2. **Refactor** the markup to use Rails view helpers, partials, and dynamic data as needed.
    3. **Add Interactivity**:
       - Write a Stimulus controller in `app/javascript/controllers/` for dynamic behavior (dropdowns, modals, tabs, etc.).
       - Connect the controller using `data-controller="your-controller-name"`.
       - Use Turbo Frames/Streams for real-time updates or partial page refreshes.
    4. **Document** adaptations in a README in `/scripts/tailwind-ui/` or `/docs/` if desired, noting which components have been converted and where their Rails versions live.

  - **Best Practices:**
    - Keep `/scripts/tailwind-ui/` as a reference library only.
    - Only productionize components by moving/adapting them into `app/views/shared/` or `app/views/components/`.
    - Use Stimulus and Turbo for all interactive behaviors instead of vanilla JS or Alpine.js.
    - Document any customizations for team reference.

  - **Example:**
    - Copy `/scripts/tailwind-ui/lists/tables/with_checkboxes.html` to `app/views/shared/_user_table.html.erb` and adapt for Rails.
    - Create `app/javascript/controllers/user_table_controller.js` for interactivity.
    - Import the controller in your JS pack or import map.

  - **Ask the AI for help** when converting a specific component or writing a Stimulus controller for a particular interaction.
  
