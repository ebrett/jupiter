---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---

- **Test-Driven Development (TDD) Workflow**
  - Always write a failing test before writing production code.
  - Only write the minimal code required to make the current test pass.
  - Write code one test at a time:  
    - Write the test  
    - Ensure it compiles  
    - Make it pass  
    - Refactor/tidy if needed

- **Committing and Test Integrity**
  - Only commit when all tests are passing.
  - Always commit all changed files.
  - Never delete or alter tests just to get a commit to pass (unless fixing a genuine bug, which must be noted in the commit message).
  - If you fake an implementation, clearly state this in the commit message.

- **Test Plan and Tracking**
  - Create and maintain a test plan, listing all required tests.
  - As you implement, add any missing tests to the plan at the appropriate place.
  - Cross off tests from the plan as they are completed.

- **Code and Commit Structure**
  - Separate commits that change behavior from those that only refactor or tidy code.
  - If you realize you've written too much code for a test, use `git revert --hard` and try again.

- **General Practices**
  - Never delete tests without explicit permission.
  - If a test is genuinely incorrect, fix it and document the reason in the commit message.
  - Consider tidying code before making behavioral changes if it will make the change easier.

**Examples:**

```ruby
# ✅ DO: Write a failing test first
it 'returns the correct sum' do
  expect(add(2, 2)).to eq(4)
end

# ✅ DO: Only write enough code to pass the test
def add(a, b)
  a + b
end

# ❌ DON'T: Write production code before a test
def add(a, b)
  a + b
end
```  
