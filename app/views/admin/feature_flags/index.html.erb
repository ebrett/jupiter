<% content_for(:page_title, "Feature Flags") %>

<div class="bg-white shadow rounded-lg p-6 mb-6">
  <div class="flex justify-between items-center mb-4">
    <h2 class="text-xl font-semibold text-gray-900">Feature Flags</h2>
    <div class="space-x-2">
      <%= link_to "New Feature Flag", new_admin_feature_flag_path,
                  class: "inline-block px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 text-sm font-medium" %>
      <%= button_to "Clear Cache", clear_cache_admin_feature_flags_path,
                    method: :post,
                    class: "inline-block px-4 py-2 bg-gray-200 rounded hover:bg-gray-300 text-sm font-medium",
                    confirm: "Are you sure you want to clear the feature flag cache?" %>
    </div>
  </div>
  
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
    <div class="bg-blue-50 p-4 rounded-lg">
      <div class="text-2xl font-bold text-blue-600"><%= @feature_flags.count %></div>
      <div class="text-sm text-blue-800">Total Flags</div>
    </div>
    
    <div class="bg-green-50 p-4 rounded-lg">
      <div class="text-2xl font-bold text-green-600"><%= @feature_flags.count(&:enabled?) %></div>
      <div class="text-sm text-green-800">Enabled</div>
    </div>
    
    <div class="bg-red-50 p-4 rounded-lg">
      <div class="text-2xl font-bold text-red-600"><%= @feature_flags.count { |f| !f.enabled? } %></div>
      <div class="text-sm text-red-800">Disabled</div>
    </div>
  </div>

  <div class="overflow-x-auto">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Assignments</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Updated</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        <% @feature_flags.each do |flag| %>
          <tr>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="text-sm font-medium text-gray-900"><%= flag.name %></div>
            </td>
            <td class="px-6 py-4">
              <div class="text-sm text-gray-500 max-w-xs truncate"><%= flag.description %></div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
              <div class="flex items-center space-x-2">
                <label class="flex items-center cursor-pointer">
                  <input type="checkbox" 
                         <%= 'checked' if flag.enabled? %>
                         class="feature-flag-toggle sr-only" 
                         data-flag-id="<%= flag.id %>"
                         data-flag-name="<%= flag.name %>">
                  <div class="relative">
                    <div class="block bg-gray-600 w-14 h-8 rounded-full toggle-bg"></div>
                    <div class="dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition toggle-dot"></div>
                  </div>
                </label>
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full 
                  <%= flag.enabled? ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>">
                  <%= flag.enabled? ? 'Enabled' : 'Disabled' %>
                </span>
              </div>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
              <%= pluralize(flag.feature_flag_assignments.count, 'assignment') %>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
              <%= flag.updated_at.strftime("%m/%d/%Y %I:%M %p") %>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
              <%= link_to "View", admin_feature_flag_path(flag), 
                          class: "text-blue-600 hover:text-blue-900" %>
              <%= link_to "Edit", edit_admin_feature_flag_path(flag), 
                          class: "text-yellow-600 hover:text-yellow-900" %>
              <%= link_to "Delete", admin_feature_flag_path(flag), 
                          method: :delete, 
                          confirm: "Are you sure you want to delete this feature flag?",
                          class: "text-red-600 hover:text-red-900" %>
            </td>
          </tr>
        <% end %>
        
        <% if @feature_flags.empty? %>
          <tr>
            <td colspan="6" class="px-6 py-4 text-center text-gray-500">
              No feature flags found. <%= link_to "Create one", new_admin_feature_flag_path, class: "text-blue-600 hover:text-blue-900" %>.
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const toggles = document.querySelectorAll('.feature-flag-toggle');
  
  toggles.forEach(toggle => {
    const toggleBg = toggle.nextElementSibling.querySelector('.toggle-bg');
    const toggleDot = toggle.nextElementSibling.querySelector('.toggle-dot');
    
    // Set initial state
    updateToggleState(toggle, toggleBg, toggleDot);
    
    toggle.addEventListener('change', function() {
      const flagId = this.dataset.flagId;
      const flagName = this.dataset.flagName;
      const wasChecked = this.checked;
      
      // Optimistically update UI
      updateToggleState(this, toggleBg, toggleDot);
      
      fetch(`/admin/feature_flags/${flagId}/toggle`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
        }
      })
      .then(response => response.json())
      .then(data => {
        // Update the status badge
        const statusBadge = this.closest('tr').querySelector('.rounded-full');
        if (data.enabled) {
          statusBadge.className = 'inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800';
          statusBadge.textContent = 'Enabled';
        } else {
          statusBadge.className = 'inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800';
          statusBadge.textContent = 'Disabled';
        }
      })
      .catch(error => {
        console.error('Error toggling feature flag:', error);
        // Revert the toggle on error
        this.checked = !wasChecked;
        updateToggleState(this, toggleBg, toggleDot);
        alert('Failed to toggle feature flag. Please try again.');
      });
    });
  });
  
  function updateToggleState(toggle, toggleBg, toggleDot) {
    if (toggle.checked) {
      toggleBg.classList.remove('bg-gray-600');
      toggleBg.classList.add('bg-blue-600');
      toggleDot.style.transform = 'translateX(1.5rem)';
    } else {
      toggleBg.classList.remove('bg-blue-600');
      toggleBg.classList.add('bg-gray-600');
      toggleDot.style.transform = 'translateX(0)';
    }
  }
});
</script>